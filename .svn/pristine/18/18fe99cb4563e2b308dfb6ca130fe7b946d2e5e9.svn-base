{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "import tabula\n",
    "\n",
    "\n",
    "# convert PDF into CSV\n",
    "a=tabula.convert_into(\"j:/testoutput.pdf\", \"output2.csv\", output_format=\"csv\",pages='all')\n",
    "print(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "430101,1304084141877-\n",
      "430101,1304084141877-\n",
      "'4301011301084141877\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    import Image\n",
    "except ImportError:\n",
    "    from PIL import Image\n",
    "import cv2\n",
    "import pytesseract\n",
    "# pytesseract.get_tesseract_version()\n",
    "img = cv2.imread('testimage/441130.jpg')\n",
    "gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "thresh_img = cv2.adaptiveThreshold(gray_img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C , cv2.THRESH_BINARY, 11, -2)\n",
    "print(pytesseract.image_to_string(thresh_img))\n",
    "print(pytesseract.image_to_string(Image.open('testimage/441130.jpg')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get_profilday(startday, endday):\n",
    "    endday = arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday = arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    durationlist = []\n",
    "\n",
    "    firstprofilday = startday.replace(day=profilday)\n",
    "    if firstprofilday < startday:\n",
    "        firstprofilday = firstprofilday.shift(months=1)\n",
    "    if (firstprofilday < endday):\n",
    "        for i in range(20):\n",
    "            if firstprofilday > endday:\n",
    "                durationlist.append((startday, endday))\n",
    "                break\n",
    "                \n",
    "            else:\n",
    "                durationlist.append((startday, firstprofilday))\n",
    "            startday = firstprofilday\n",
    "            firstprofilday = firstprofilday.shift(months=1)\n",
    "\n",
    "\n",
    "    elif firstprofilday > endday:\n",
    "        durationlist.append((startday, endday))\n",
    "\n",
    "        \n",
    "\n",
    "    return durationlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100,000.00\n"
     ]
    }
   ],
   "source": [
    "print(\"{:0,.2f}\".format(100000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_pages {40725}\n"
     ]
    }
   ],
   "source": [
    "a=5.43*750000/100\n",
    "print(\"num_pages {%d}\" % a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-73911.3599999994\n"
     ]
    }
   ],
   "source": [
    "a=36857422.43-36931333.79\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24\n",
      "20101109 20101203 552.33\n",
      "31\n",
      "20101203 20110103 713.42\n",
      "31\n",
      "20110103 20110203 713.42\n",
      "27\n",
      "20110203 20110302 621.37\n"
     ]
    }
   ],
   "source": [
    "# 30天 理财 3日分红\n",
    "import arrow\n",
    "buy=[\"20101109 14:23:12\",0,400000]\n",
    "get=[\"20110302 12:32:43\",400000,0]\n",
    "interest_rate = 0.021\n",
    "profilday =3\n",
    "\n",
    "def get_profilday(startday, endday):\n",
    "    #endday = arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    #startday = arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    durationlist = []\n",
    "\n",
    "    firstprofilday = startday.replace(day=profilday)\n",
    "    if firstprofilday < startday:\n",
    "        firstprofilday = firstprofilday.shift(months=1)\n",
    "    if (firstprofilday < endday):\n",
    "        for i in range(20):\n",
    "            if firstprofilday > endday:\n",
    "                durationlist.append((startday, endday))\n",
    "                break\n",
    "                \n",
    "            else:\n",
    "                durationlist.append((startday, firstprofilday))\n",
    "            startday = firstprofilday\n",
    "            firstprofilday = firstprofilday.shift(months=1)\n",
    "\n",
    "\n",
    "    elif firstprofilday > endday:\n",
    "        durationlist.append((startday, endday))\n",
    "\n",
    "        \n",
    "\n",
    "    return durationlist\n",
    "    \n",
    "def month_profit(baseMoney, interest_rate, startday, endday):\n",
    "    \n",
    "    endday=arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday=arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    profillistday = get_profilday(startday,endday)\n",
    "    for dayspan in profillistday:\n",
    "        \n",
    "\n",
    "        firstprofil = manyday_profit_calc2(baseMoney, interest_rate, dayspan[0], dayspan[1])\n",
    "        print(dayspan[0].format(\"YYYYMMDD\"),dayspan[1].format(\"YYYYMMDD\"),firstprofil)\n",
    "\n",
    "def manyday_profit_calc2(baseMoney, interest_rate, startday, endday):\n",
    "    \"\"\"Calculates simple interest on one user's account.\n",
    "\n",
    "    Args:\n",
    "        blance (float): Beginning amount before interest.\n",
    "        interest_rate (float): Interest rate for account.\n",
    "        months (int): Number of months to calculate for.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    longday = (endday.date() - startday.date()).days\n",
    "    print(longday)\n",
    "    interest = round(baseMoney * interest_rate/365*longday, 2)\n",
    "    return interest\n",
    "\n",
    "month_profit(buy[2], interest_rate, buy[0], get[0])\n",
    "\n",
    "#print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20180720 03:47:51\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "st = \"01:30:00\"\n",
    "et = \"04:30:33\"\n",
    "\n",
    "\n",
    "def time2seconds(t):\n",
    "    h, m, s = t.strip().split(\":\")\n",
    "    return int(h) * 3600 + int(m) * 60 + int(s)\n",
    "\n",
    "\n",
    "def seconds2time(sec):\n",
    "    m, s = divmod(sec, 60)\n",
    "    h, m = divmod(m, 60)\n",
    "    return \"%02d:%02d:%02d\" % (h, m, s)\n",
    "\n",
    "\n",
    "sts = time2seconds(st)  # sts==27000\n",
    "ets = time2seconds(et)  # ets==34233\n",
    "\n",
    "\n",
    "def getrandomtime():\n",
    "\n",
    "    a= random.sample(range(sts, ets), 10)[0]\n",
    "    return seconds2time(a)\n",
    "randtime= getrandomtime()\n",
    "interest_day = arrow.now()\n",
    "\n",
    "\n",
    "print(\" \".join([interest_day.format(\"YYYYMMDD\"),randtime]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(<Arrow [2010-12-09T14:13:35+00:00]>, <Arrow [2011-01-03T14:13:35+00:00]>), (<Arrow [2011-01-03T14:13:35+00:00]>, <Arrow [2011-01-28T12:22:03+00:00]>)]\n"
     ]
    }
   ],
   "source": [
    "import arrow\n",
    "buy=[\"20101209 14:13:35\",0.00,1000000.00]\n",
    "get=[\"20110128 12:22:03\",1000000.00,0.00]\n",
    "profilday =3\n",
    "\n",
    "def get_profilday(startday, endday):\n",
    "    endday = arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday = arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    durationlist = []\n",
    "\n",
    "    firstprofilday = startday.replace(day=profilday)\n",
    "    if firstprofilday < startday:\n",
    "        firstprofilday = firstprofilday.shift(months=1)\n",
    "    if (firstprofilday < endday):\n",
    "        for i in range(20):\n",
    "            if firstprofilday > endday:\n",
    "                durationlist.append((startday, endday))\n",
    "                break\n",
    "                \n",
    "            else:\n",
    "                durationlist.append((startday, firstprofilday))\n",
    "            startday = firstprofilday\n",
    "            firstprofilday = firstprofilday.shift(months=1)\n",
    "\n",
    "\n",
    "    elif firstprofilday > endday:\n",
    "        durationlist.append((startday, endday))\n",
    "\n",
    "        \n",
    "\n",
    "    return durationlist\n",
    "c= get_profilday(buy[0],get[0]) \n",
    "\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "384\n",
      "20110828 50814.25\n"
     ]
    }
   ],
   "source": [
    "# 长期理财 400天\n",
    "import arrow\n",
    "buy=[\"20100809 14:13:35\",0.00,1150000.00]\n",
    "get=[\"20110828 12:22:03\",1150000.00,0.00]\n",
    "interest_rate = 0.042\n",
    "def month_profit(baseMoney, interest_rate, startday, endday):\n",
    "    endday=arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday=arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    lasdy=  startday\n",
    "    for profit_day in arrow.Arrow.interval('day', startday,endday,700):\n",
    "        profil= manyday_profit_calc2(baseMoney, interest_rate, profit_day[0], profit_day[1])\n",
    "        #print(profil)\n",
    "        print(profit_day[1].format(\"YYYYMMDD\"),profil)\n",
    "        lasdy=profit_day[1]\n",
    "    lastprofil = manyday_profit_calc2(baseMoney, interest_rate, lasdy, endday)\n",
    "    print(endday.format(\"YYYYMMDD\"),lastprofil)\n",
    "def manyday_profit_calc2(baseMoney, interest_rate, startday, endday):\n",
    "    \"\"\"Calculates simple interest on one user's account.\n",
    "\n",
    "    Args:\n",
    "        blance (float): Beginning amount before interest.\n",
    "        interest_rate (float): Interest rate for account.\n",
    "        months (int): Number of months to calculate for.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    longday = (endday.date() - startday.date()).days\n",
    "    print(longday)\n",
    "    interest = round(baseMoney * interest_rate/365*longday, 2)\n",
    "    return interest\n",
    "\n",
    "def manyday_profit_calc(baseMoney, interest_rate, startday, endday):\n",
    "    \"\"\"Calculates simple interest on one user's account.\n",
    "\n",
    "    Args:\n",
    "        blance (float): Beginning amount before interest.\n",
    "        interest_rate (float): Interest rate for account.\n",
    "        months (int): Number of months to calculate for.\n",
    "\n",
    "    \"\"\"\n",
    "    endday=arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday=arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    longday = (endday.date() - startday.date()).days\n",
    "\n",
    "    interest = round(baseMoney * interest_rate/365*longday, 2)\n",
    "    return interest\n",
    "month_profit(buy[2], interest_rate, buy[0], get[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175\n",
      "20141008 3547.95\n"
     ]
    }
   ],
   "source": [
    "# 190天\n",
    "import arrow\n",
    "buy=[\"20140416 09:33:20\",0,200000]\n",
    "get=[\"20141008 12:35:25\",200000,0]\n",
    "interest_rate = 0.037\n",
    "def month_profit(baseMoney, interest_rate, startday, endday):\n",
    "    endday=arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday=arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    lasdy=  startday\n",
    "    for profit_day in arrow.Arrow.interval('day', startday,endday,300):\n",
    "        profil= manyday_profit_calc2(baseMoney, interest_rate, profit_day[0], profit_day[1])\n",
    "        #print(profil)\n",
    "        print(profit_day[1].format(\"YYYYMMDD\"),profil)\n",
    "        lasdy=profit_day[1]\n",
    "    lastprofil = manyday_profit_calc2(baseMoney, interest_rate, lasdy, endday)\n",
    "    print(endday.format(\"YYYYMMDD\"),lastprofil)\n",
    "def manyday_profit_calc2(baseMoney, interest_rate, startday, endday):\n",
    "    \"\"\"Calculates simple interest on one user's account.\n",
    "\n",
    "    Args:\n",
    "        blance (float): Beginning amount before interest.\n",
    "        interest_rate (float): Interest rate for account.\n",
    "        months (int): Number of months to calculate for.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    longday = (endday.date() - startday.date()).days\n",
    "    print(longday)\n",
    "    interest = round(baseMoney * interest_rate/365*longday, 2)\n",
    "    return interest\n",
    "\n",
    "def manyday_profit_calc(baseMoney, interest_rate, startday, endday):\n",
    "    \"\"\"Calculates simple interest on one user's account.\n",
    "\n",
    "    Args:\n",
    "        blance (float): Beginning amount before interest.\n",
    "        interest_rate (float): Interest rate for account.\n",
    "        months (int): Number of months to calculate for.\n",
    "\n",
    "    \"\"\"\n",
    "    endday=arrow.get(endday, \"YYYYMMDD hh:mm:ss\")\n",
    "    startday=arrow.get(startday, \"YYYYMMDD hh:mm:ss\")\n",
    "    longday = (endday.date() - startday.date()).days\n",
    "\n",
    "    interest = round(baseMoney * interest_rate/365*longday, 2)\n",
    "    return interest\n",
    "month_profit(buy[2], interest_rate, buy[0], get[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33\n",
      "2010-11-25T13:14:23+00:00\n",
      "[(<Arrow [2010-11-25T00:00:00+00:00]>, <Arrow [2010-12-24T23:59:59.999999+00:00]>)]\n",
      "2010-11-09T13:14:23+00:00\n"
     ]
    }
   ],
   "source": [
    "import arrow\n",
    "buy=[\"20101125 13:14:23\",0.00,630000.00]\n",
    "get=[\"20101229 12:36:03\",630000.00,0.00]\n",
    "startday=arrow.get(buy[0], \"YYYYMMDD hh:mm:ss\")\n",
    "endday=arrow.get(get[0], \"YYYYMMDD hh:mm:ss\")\n",
    "t=arrow.Arrow.interval('day', startday, endday,30)\n",
    "a=startday.replace(day=9)\n",
    "m = (endday-startday).days\n",
    "print(m)\n",
    "print(startday)\n",
    "print(t)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★\n"
     ]
    }
   ],
   "source": [
    "starline = u'\\u2605'\n",
    "for i in range(100):\n",
    "    starline =\"\".join([u'\\u2605',starline])\n",
    "print(starline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-20-3b10e880c141>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-20-3b10e880c141>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    with open(\"text.txt\",\"r\",encoding='gb18030’) as f:\u001b[0m\n\u001b[1;37m                                                      ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "d=[]\n",
    "with open(\"text.txt\",\"r\",encoding='gb18030’) as f:\n",
    "    line = f.readline()\n",
    "    while line:\n",
    "        line = f.readline()\n",
    "        if line.find(\"客户\") or line.find(\"customer\") or line.find(\"转账\") or line.find(\"fund\"):\n",
    "            d.append(\"客户转账\")\n",
    "        elif line.find(\"申购\"):\n",
    "            d.append(\"受托理财申购\")\n",
    "        elif line.find(\"柜台\") or line.find(\"存款\"):\n",
    "            d.append(\"柜台存款\")\n",
    "        elif line.find(\"网银\") or line.find(\"贷记\"):\n",
    "            d.append(\"RI网银贷记发起付款\")         \n",
    "        elif line.find(\"赎回\") :\n",
    "            d.append(\"受托理财赎回\")\n",
    "        elif line.find(\"分\") :\n",
    "            d.append(\"受托理财分红\")\n",
    "        elif line.find(\"银证\") or line.find(\"第\") or line.find(\"三\") or line.find(\"证\") or line.find(\"stock\"):\n",
    "            d.apend(\"银证转账(第三方存管)\")\n",
    "        elif line.find(\"直\") or line.find(\"付\") or line.find(\"通\") or line.find(\"双\") or line.find(\"商户\"):\n",
    "            d.append(\"直付通在双向类客户交易(交易)\")\n",
    "        elif line.find(\"银联\") or line.find(\"ATM\") or line.find(\"withdraw\") or line.find(\"Union\") or line.find(\"商户\"):\n",
    "            d.append(\"直付通在双向类客户交易(交易)\")\n",
    "        elif line.find(\"银联\") or line.find(\"国债\") or line.find(\"付息\"):\n",
    "            d.append(\"储蓄国债付息\")\n",
    "        elif line.find(\"银联消费\") or line.find(\"消费\"):\n",
    "            d.append(\"银联消费\")\n",
    "        elif line.find(\"招行个人\") or line.find(\"个人\"):\n",
    "            d.append(\"银联消费\")\n",
    "\n",
    "        \n",
    "with open(\"out.txt\",\"w\") as wf:\n",
    "    for  line in d:\n",
    "        wf.write(line+\"\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

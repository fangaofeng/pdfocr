{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "try:\n",
    "    import Image\n",
    "except ImportError:\n",
    "    from PIL import Image\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pytesseract\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "from math import radians, degrees\n",
    "from pdftabextract import imgproc\n",
    "from pdftabextract.common import ROTATION, SKEW_X, SKEW_Y, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL\n",
    "filename = \"4共.jpg\"\n",
    "iproc_obj = imgproc.ImageProc(filename)\n",
    "print(iproc_obj.input_img.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sum = 0.0\n",
    "number = 0\n",
    "print('检测线条')\n",
    "lines_hough = iproc_obj.detect_lines(canny_low_thresh=50, canny_high_thresh=250, canny_kernel_size=3,\n",
    "                                     hough_rho_res=1,\n",
    "                                     hough_theta_res=np.pi/800,\n",
    "                                     hough_votes_thresh=850)\n",
    "\n",
    "\n",
    "img_lines = iproc_obj.draw_lines(orig_img_as_background=True)\n",
    "\"\"\"\n",
    "print('计算水平校正')\n",
    "sum = 0.0\n",
    "number = 0\n",
    "theta_rotate = 0.0\n",
    "for line in lines_hough:\n",
    "    \n",
    "    rho, theta, theta_norm, line_dir=line\n",
    "    if line_dir == DIRECTION_HORIZONTAL:\n",
    "        sum +=theta_norm\n",
    "        number +=1\n",
    "if number != 0:\n",
    "    theta_rotate = 90-degrees(sum/number)\n",
    "\"\"\"\n",
    "theta_rotate = iproc_obj.find_rotation_or_skew()\n",
    "print(\"校正角度 {}\".format(theta_rotate))\n",
    "plt.gcf().set_size_inches(30,50)\n",
    "plt.imshow(img_lines)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "rotate_image = iproc_obj.rotate_image(iproc_obj.gray_img,theta_rotate)\n",
    "\n",
    "plt.gcf().set_size_inches(60,50)\n",
    "plt.subplot(1,1,1),plt.imshow(rotate_image,'gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tabledetect import detectTable\n",
    "dtable = detectTable(rotate_image)\n",
    "mask,joints_img =  dtable.run()\n",
    "\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(2,1,1),plt.imshow(mask,'gray')\n",
    "plt.subplot(2,1,2),plt.imshow(joints_img,'gray')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_count,x_segmentation = dtable.verticalShadow(joints_img,1)\n",
    "y_count,y_segmentation = dtable.horizontalShadow(joints_img,1)\n",
    "\n",
    "print(\"ok\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(x_segmentation))\n",
    "print(len(y_segmentation))\n",
    "\n",
    "emptyImagev, emptyImageh=dtable.getShadowimg(joints_img,x_count,y_count)\n",
    "plt.gcf().set_size_inches(60.0,40.0)\n",
    "plt.subplot(2,1,1),plt.imshow(emptyImagev,'gray')\n",
    "plt.subplot(2,1,2),plt.imshow(emptyImageh,'gray')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows,colums=dtable.getGrid(joints_img,x_segmentation,y_segmentation)\n",
    "print(rows)\n",
    "print(colums)\n",
    "print(len(rows))\n",
    "print(len(colums))\n",
    "green = (255, 255, 255)\n",
    "h,w=joints_img.shape\n",
    "emptyImage = joints_img.copy()\n",
    "for x in colums:\n",
    "    cv2.line(emptyImage, (x, 0), (x, h), green)\n",
    "for y in rows:\n",
    "\n",
    "    cv2.line(emptyImage, (0, y), (w, y), green)\n",
    "plt.gcf().set_size_inches(60.0,40.0)\n",
    "plt.imshow(emptyImage,'gray')\n",
    "plt.show()\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from tabledetect import cutImage\n",
    "bin_threshold = 100\n",
    "kernel = cv2.getStructuringElement(\n",
    "    cv2.MORPH_CROSS, (3, 3))\n",
    "iterations = 1\n",
    "areaRange = [100, 10000]\n",
    "cutimage = cutImage(mask, bin_threshold, kernel,\n",
    "                     iterations, areaRange)\n",
    "roilist,cell_image = cutimage.getRes()\n",
    "plt.gcf().set_size_inches(60.0,40.0)\n",
    "plt.imshow(cell_image)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tabledetect import roiToCell\n",
    "x_structure = cv2.getStructuringElement(\n",
    "            cv2.MORPH_CROSS, (3, 3)) \n",
    "x_mask = cv2.dilate(mask, x_structure, 1)\n",
    "\n",
    "image_reconige = np.zeros(rotate_image.shape, np.uint8)\n",
    "image_reconige = cv2.bitwise_not(rotate_image, image_reconige, mask=~x_mask)\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(1,1,1),plt.imshow(image_reconige,'gray')\n",
    "plt.show()\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(1,1,1),plt.imshow(image_reconige,'gray')\n",
    "plt.show()\n",
    "\n",
    "print(len(rows)-1)\n",
    "print(len(colums)-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "cells = roiToCell(image_reconige,roilist,rows,colums)\n",
    "roilisttable = cells.roilistToCell()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tablelist = [[\"\" for col in range(1,len(colums))] for row in range(1,len(rows))]\n",
    "print(len(tablelist))\n",
    "print(len(tablelist[0]))\n",
    "\n",
    "border =1\n",
    "for roi in roilisttable:\n",
    "\n",
    "    cr,text,roirect = roi\n",
    "    x,y,w,h=roirect\n",
    "    each = image_reconige[y-border:(y+h)+border,\n",
    "                       x-border:(x+w)+border]\n",
    "    cv2.imwrite(\"testimage/{}{}.jpg\".format(roirect[0], roirect[1]), each)\n",
    "    tablelist[cr[0]][cr[1]] = text\n",
    "df=pd.DataFrame(tablelist)\n",
    "writer = pd.ExcelWriter(filename+'.xlsx')\n",
    "df.to_excel(writer, sheet_name='sheet1')\n",
    "writer.save()\n",
    "print(\"ok\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from BaiduAipOcr import BaiduAipOcr\n",
    "def get_file_content(filePath):\n",
    "    with open(filePath, 'rb') as fp:\n",
    "        return fp.read()\n",
    "\n",
    "image = get_file_content(\"testimage/23094.jpg\")\n",
    "\n",
    "\"\"\" 调用通用文字识别（高精度版） \"\"\"\n",
    "client=BaiduAipOcr()\n",
    "\n",
    "\"\"\" 带参数调用通用文字识别（高精度版） \"\"\"\n",
    "t5=client.basicGeneral(image)\n",
    "print(t5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'j:/gongshang/'\n",
    "t=os.listdir(path)\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "colums = np.arange(1,15)\n",
    "\n",
    "a = np.where(colums < 14.5)\n",
    "print(a)\n",
    "print(int(a[0][-1]))\n",
    "ttt= []\n",
    "ttt.append([1])\n",
    "print(ttt)\n",
    "ttt.extend([2])\n",
    "print(ttt)\n",
    "multilist = [[\"\" for col in range(5)] for row in range(6)]\n",
    "multilist[0][1] = \"test\"\n",
    "df=pd.DataFrame(multilist)\n",
    "multilist[0][2] = \"test\"\n",
    "df2=pd.DataFrame(multilist)\n",
    "writer = pd.ExcelWriter(filename+'.xlsx')\n",
    "df.to_excel(writer, sheet_name='sheet1')\n",
    "df2.to_excel(writer, sheet_name='s42')\n",
    "writer.save()\n",
    "writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    " \n",
    "path = 'j:/gongshang/'\n",
    " \n",
    "for fpathe,dirs,fs in os.walk(path):\n",
    "    print(fpathe)\n",
    "    print(dirs)\n",
    "    for f in fs:\n",
    "        print(os.path.join(fpathe,f))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "expressfilename = 'j:/teeeee.jpg'\n",
    "expresssheet = os.path.basename(expressfilename).split('.')[0]\n",
    "print(expresssheet)\n",
    "(filepath,tempfilename) = os.path.split(expressfilename)\n",
    "filename,extension = os.path.splitext(tempfilename)\n",
    "print(filepath)\n",
    "print(filename)\n",
    "print(extension)\n",
    "\n",
    "tempout = \"temp1/\"\n",
    "tempoutpath=os.path.join(filepath,tempout)\n",
    "if not os.path.exists(os.path.join(filepath,tempout)):\n",
    "    os.makedirs(tempoutpath)\n",
    "savepath = os.path.join(filepath,tempout,filename+\".json\")\n",
    "with open(savepath, 'w') as f:\n",
    "    f.write(\"tt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "t = [[[52, 13], 'test', (1306, 1133, 398, 20)], [[52, 12], 'test', (1255, 1133, 50, 19)], [[52, 11], 'test', (1199, 1133, 55, 19)], [[52, 10], 'test', (1143, 1132, 54, 20)], [[52, 9], 'test', (1092, 1132, 50, 19)], [[52, 8], 'test', (896, 1132, 194, 19)], [[52, 7], 'test', (792, 1131, 102, 20)], [[52, 6], 'test', (688, 1131, 103, 19)], [[52, 5], 'test', (584, 1131, 103, 19)], [[52, 4], 'test', (548, 1130, 34, 19)], [[52, 3], 'test', (429, 1130, 118, 19)], [[52, 2], 'test', (249, 1129, 179, 20)], [[52, 1], 'test', (185, 1129, 62, 19)], [[52, 0], 'test', (10, 1128, 173, 20)], [[51, 13], 'test', (1306, 1112, 398, 20)], [[51, 12], 'test', (1255, 1112, 50, 19)], [[51, 11], 'test', (1199, 1112, 54, 19)], [[51, 10], 'test', (1143, 1112, 54, 19)], [[51, 9], 'test', (1092, 1111, 49, 20)], [[51, 8], 'test', (896, 1111, 194, 19)], [[51, 7], 'test', (792, 1110, 102, 20)], [[51, 6], 'test', (688, 1110, 102, 19)], [[51, 5], 'test', (584, 1110, 103, 19)], [[51, 4], 'test', (548, 1109, 34, 19)], [[51, 3], 'test', (429, 1109, 118, 19)], [[51, 2], 'test', (249, 1108, 178, 20)], [[51, 1], 'test', (185, 1108, 62, 19)], [[51, 0], 'test', (10, 1107, 173, 20)], [[50, 13], 'test', (1306, 1091, 398, 20)], [[50, 12], 'test', (1255, 1091, 50, 19)], [[50, 11], 'test', (1199, 1091, 54, 19)], [[50, 10], 'test', (1143, 1091, 54, 19)], [[50, 9], 'test', (1092, 1091, 49, 18)], [[50, 8], 'test', (896, 1090, 194, 19)], [[50, 7], 'test', (792, 1089, 102, 20)], [[50, 6], 'test', (688, 1089, 102, 19)], [[50, 5], 'test', (584, 1089, 102, 19)], [[50, 4], 'test', (548, 1088, 34, 20)], [[50, 3], 'test', (429, 1088, 117, 20)], [[50, 2], 'test', (249, 1087, 178, 20)], [[50, 1], 'test', (185, 1087, 62, 19)], [[50, 0], 'test', (10, 1086, 173, 20)], [[49, 13], 'test', (1306, 1071, 397, 19)], [[49, 12], 'test', (1255, 1070, 49, 19)], [[49, 11], 'test', (1199, 1070, 54, 19)], [[49, 10], 'test', (1143, 1070, 54, 19)], [[49, 9], 'test', (1092, 1070, 49, 19)], [[49, 8], 'test', (896, 1069, 194, 20)], [[49, 7], 'test', (792, 1069, 102, 19)], [[49, 6], 'test', (688, 1068, 102, 19)], [[49, 5], 'test', (584, 1068, 102, 19)], [[49, 4], 'test', (548, 1068, 34, 19)], [[49, 3], 'test', (429, 1067, 117, 19)], [[49, 2], 'test', (249, 1066, 178, 20)], [[49, 1], 'test', (185, 1066, 62, 19)], [[49, 0], 'test', (10, 1065, 173, 20)], [[48, 13], 'test', (1306, 1049, 397, 21)], [[48, 12], 'test', (1255, 1049, 49, 20)], [[48, 11], 'test', (1199, 1048, 54, 20)], [[48, 10], 'test', (1143, 1048, 54, 20)], [[48, 9], 'test', (1092, 1048, 49, 20)], [[48, 8], 'test', (896, 1047, 194, 21)], [[48, 7], 'test', (792, 1047, 102, 20)], [[48, 6], 'test', (688, 1046, 102, 21)], [[48, 5], 'test', (584, 1046, 102, 20)], [[48, 4], 'test', (548, 1046, 34, 20)], [[48, 3], 'test', (429, 1045, 117, 21)], [[48, 2], 'test', (248, 1044, 179, 21)], [[48, 1], 'test', (185, 1044, 62, 19)], [[48, 0], 'test', (10, 1043, 173, 20)], [[47, 13], 'test', (1306, 1029, 397, 19)], [[47, 12], 'test', (1255, 1028, 49, 19)], [[47, 11], 'test', (1198, 1028, 55, 19)], [[47, 10], 'test', (1143, 1028, 53, 18)], [[47, 9], 'test', (1092, 1027, 49, 19)], [[47, 8], 'test', (895, 1027, 194, 19)], [[47, 7], 'test', (792, 1026, 101, 19)], [[47, 6], 'test', (688, 1026, 102, 19)], [[47, 5], 'test', (584, 1026, 102, 18)], [[47, 4], 'test', (548, 1025, 34, 19)], [[47, 3], 'test', (429, 1025, 117, 19)], [[47, 2], 'test', (248, 1024, 179, 19)], [[47, 1], 'test', (185, 1024, 61, 19)], [[47, 0], 'test', (10, 1023, 173, 19)], [[46, 13], 'test', (1306, 1008, 397, 20)], [[46, 12], 'test', (1255, 1008, 49, 18)], [[46, 11], 'test', (1198, 1008, 55, 18)], [[46, 10], 'test', (1143, 1008, 53, 18)], [[46, 9], 'test', (1092, 1007, 49, 19)], [[46, 8], 'test', (895, 1007, 194, 18)], [[46, 7], 'test', (792, 1006, 101, 19)], [[46, 6], 'test', (688, 1006, 102, 18)], [[46, 5], 'test', (584, 1005, 102, 19)], [[46, 4], 'test', (548, 1005, 34, 19)], [[46, 3], 'test', (429, 1005, 117, 19)], [[46, 2], 'test', (248, 1004, 179, 19)], [[46, 1], 'test', (185, 1004, 61, 18)], [[46, 0], 'test', (10, 1003, 173, 19)], [[45, 13], 'test', (1306, 988, 397, 19)], [[45, 12], 'test', (1255, 987, 49, 19)], [[45, 11], 'test', (1198, 987, 55, 19)], [[45, 10], 'test', (1143, 987, 53, 19)], [[45, 9], 'test', (1091, 987, 50, 18)], [[45, 8], 'test', (895, 986, 194, 19)], [[45, 7], 'test', (792, 986, 101, 18)], [[45, 6], 'test', (688, 985, 102, 19)], [[45, 5], 'test', (584, 985, 102, 19)], [[45, 4], 'test', (548, 985, 34, 18)], [[45, 3], 'test', (429, 984, 117, 19)], [[45, 2], 'test', (248, 984, 179, 19)], [[45, 1], 'test', (185, 983, 61, 19)], [[45, 0], 'test', (10, 983, 173, 19)], [[44, 13], 'test', (1306, 967, 397, 20)], [[44, 12], 'test', (1255, 966, 49, 20)], [[44, 11], 'test', (1198, 966, 55, 19)], [[44, 10], 'test', (1143, 966, 53, 19)], [[44, 9], 'test', (1091, 966, 50, 19)], [[44, 8], 'test', (895, 965, 194, 20)], [[44, 7], 'test', (792, 965, 101, 19)], [[44, 6], 'test', (688, 965, 102, 19)], [[44, 5], 'test', (584, 964, 102, 19)], [[44, 4], 'test', (548, 964, 34, 19)], [[44, 3], 'test', (429, 964, 117, 19)], [[44, 2], 'test', (248, 963, 179, 19)], [[44, 1], 'test', (185, 963, 61, 19)], [[44, 0], 'test', (9, 962, 174, 19)], [[43, 13], 'test', (1306, 946, 397, 20)], [[43, 12], 'test', (1255, 945, 49, 20)], [[43, 11], 'test', (1198, 945, 55, 20)], [[43, 10], 'test', (1143, 945, 53, 19)], [[43, 9], 'test', (1091, 945, 49, 19)], [[43, 8], 'test', (895, 944, 194, 20)], [[43, 7], 'test', (792, 944, 101, 19)], [[43, 6], 'test', (688, 943, 102, 20)], [[43, 5], 'test', (584, 943, 102, 20)], [[43, 4], 'test', (548, 943, 34, 19)], [[43, 3], 'test', (429, 942, 117, 20)], [[43, 2], 'test', (248, 942, 179, 20)], [[43, 1], 'test', (185, 942, 61, 19)], [[43, 0], 'test', (9, 941, 174, 20)], [[42, 13], 'test', (1306, 925, 397, 20)], [[42, 12], 'test', (1255, 924, 49, 19)], [[42, 11], 'test', (1198, 924, 54, 19)], [[42, 10], 'test', (1142, 924, 54, 19)], [[42, 9], 'test', (1091, 924, 49, 19)], [[42, 8], 'test', (895, 923, 194, 20)], [[42, 7], 'test', (792, 923, 101, 19)], [[42, 6], 'test', (688, 923, 102, 19)], [[42, 5], 'test', (584, 922, 102, 19)], [[42, 4], 'test', (548, 922, 34, 19)], [[42, 3], 'test', (429, 922, 117, 19)], [[42, 2], 'test', (248, 921, 178, 19)], [[42, 1], 'test', (184, 921, 62, 19)], [[42, 0], 'test', (9, 920, 173, 20)], [[41, 13], 'test', (1306, 904, 396, 20)], [[41, 12], 'test', (1254, 903, 50, 20)], [[41, 11], 'test', (1198, 903, 54, 19)], [[41, 10], 'test', (1142, 903, 54, 19)], [[41, 9], 'test', (1091, 903, 49, 19)], [[41, 8], 'test', (895, 902, 194, 20)], [[41, 7], 'test', (792, 902, 101, 19)], [[41, 6], 'test', (688, 901, 101, 20)], [[41, 5], 'test', (583, 901, 103, 19)], [[41, 4], 'test', (548, 901, 33, 19)], [[41, 3], 'test', (428, 900, 118, 20)], [[41, 2], 'test', (248, 900, 178, 20)], [[41, 1], 'test', (184, 899, 62, 20)], [[41, 0], 'test', (9, 899, 173, 20)], [[40, 13], 'test', (1306, 883, 396, 20)], [[40, 12], 'test', (1254, 882, 50, 20)], [[40, 11], 'test', (1198, 882, 54, 19)], [[40, 10], 'test', (1142, 882, 54, 19)], [[40, 9], 'test', (1091, 882, 49, 19)], [[40, 8], 'test', (895, 881, 194, 20)], [[40, 7], 'test', (792, 881, 101, 19)], [[40, 6], 'test', (688, 880, 101, 20)], [[40, 5], 'test', (583, 880, 102, 19)], [[40, 4], 'test', (547, 880, 34, 19)], [[40, 3], 'test', (428, 880, 118, 19)], [[40, 2], 'test', (248, 879, 178, 19)], [[40, 1], 'test', (184, 879, 62, 19)], [[40, 0], 'test', (9, 878, 173, 19)], [[39, 13], 'test', (1306, 862, 396, 20)], [[39, 12], 'test', (1254, 861, 49, 19)], [[39, 11], 'test', (1198, 861, 54, 19)], [[39, 10], 'test', (1142, 861, 54, 19)], [[39, 9], 'test', (1091, 861, 49, 19)], [[39, 8], 'test', (895, 860, 194, 20)], [[39, 7], 'test', (791, 860, 101, 19)], [[39, 6], 'test', (688, 859, 101, 20)], [[39, 5], 'test', (583, 859, 102, 20)], [[39, 4], 'test', (547, 859, 34, 19)], [[39, 3], 'test', (428, 858, 118, 20)], [[39, 2], 'test', (248, 858, 178, 20)], [[39, 1], 'test', (184, 858, 62, 19)], [[39, 0], 'test', (9, 857, 173, 20)], [[38, 13], 'test', (1306, 841, 396, 20)], [[38, 12], 'test', (1254, 840, 49, 20)], [[38, 11], 'test', (1198, 840, 54, 19)], [[38, 10], 'test', (1142, 840, 54, 19)], [[38, 9], 'test', (1091, 840, 49, 19)], [[38, 8], 'test', (895, 839, 194, 20)], [[38, 7], 'test', (791, 839, 101, 19)], [[38, 6], 'test', (688, 839, 101, 19)], [[38, 5], 'test', (583, 838, 102, 20)], [[38, 4], 'test', (547, 838, 34, 19)], [[38, 3], 'test', (428, 838, 118, 19)], [[38, 2], 'test', (248, 837, 178, 19)], [[38, 1], 'test', (184, 837, 62, 19)], [[38, 0], 'test', (9, 836, 173, 20)], [[37, 13], 'test', (1305, 820, 397, 20)], [[37, 12], 'test', (1254, 820, 49, 19)], [[37, 11], 'test', (1197, 819, 55, 19)], [[37, 10], 'test', (1142, 819, 53, 19)], [[37, 9], 'test', (1090, 819, 50, 19)], [[37, 8], 'test', (895, 819, 193, 19)], [[37, 7], 'test', (791, 818, 101, 19)], [[37, 6], 'test', (687, 818, 102, 19)], [[37, 5], 'test', (583, 817, 102, 20)], [[37, 4], 'test', (547, 817, 34, 19)], [[37, 3], 'test', (428, 817, 117, 19)], [[37, 2], 'test', (248, 816, 178, 20)], [[37, 1], 'test', (184, 816, 62, 19)], [[37, 0], 'test', (9, 815, 173, 20)], [[36, 13], 'test', (1305, 799, 397, 20)], [[36, 12], 'test', (1254, 799, 49, 19)], [[36, 11], 'test', (1197, 799, 55, 18)], [[36, 10], 'test', (1142, 799, 53, 18)], [[36, 9], 'test', (1090, 799, 50, 18)], [[36, 8], 'test', (895, 798, 193, 19)], [[36, 7], 'test', (791, 798, 101, 18)], [[36, 6], 'test', (687, 797, 102, 19)], [[36, 5], 'test', (583, 797, 102, 19)], [[36, 4], 'test', (547, 796, 34, 19)], [[36, 3], 'test', (428, 796, 117, 19)], [[36, 2], 'test', (248, 795, 178, 20)], [[36, 1], 'test', (184, 795, 62, 19)], [[36, 0], 'test', (9, 794, 173, 20)], [[35, 13], 'test', (1305, 779, 397, 20)], [[35, 12], 'test', (1254, 779, 49, 18)], [[35, 11], 'test', (1197, 778, 55, 19)], [[35, 10], 'test', (1142, 778, 53, 19)], [[35, 9], 'test', (1090, 778, 50, 19)], [[35, 8], 'test', (894, 777, 194, 19)], [[35, 7], 'test', (791, 777, 101, 19)], [[35, 6], 'test', (687, 776, 102, 19)], [[35, 5], 'test', (583, 776, 102, 19)], [[35, 4], 'test', (547, 776, 34, 19)], [[35, 3], 'test', (428, 775, 117, 20)], [[35, 2], 'test', (247, 775, 179, 19)], [[35, 1], 'test', (184, 774, 61, 19)], [[35, 0], 'test', (9, 774, 173, 19)], [[34, 13], 'test', (1305, 758, 397, 20)], [[34, 12], 'test', (1254, 758, 49, 19)], [[34, 11], 'test', (1197, 758, 55, 18)], [[34, 10], 'test', (1142, 758, 53, 18)], [[34, 9], 'test', (1090, 757, 50, 19)], [[34, 8], 'test', (894, 757, 194, 19)], [[34, 7], 'test', (791, 756, 101, 19)], [[34, 6], 'test', (687, 756, 102, 19)], [[34, 5], 'test', (583, 756, 102, 18)], [[34, 4], 'test', (547, 755, 34, 19)], [[34, 3], 'test', (428, 755, 117, 19)], [[34, 2], 'test', (247, 754, 179, 19)], [[34, 1], 'test', (184, 754, 61, 19)], [[34, 0], 'test', (9, 753, 173, 19)], [[33, 13], 'test', (1305, 738, 397, 20)], [[33, 12], 'test', (1254, 737, 49, 19)], [[33, 11], 'test', (1197, 737, 54, 19)], [[33, 10], 'test', (1142, 737, 53, 19)], [[33, 9], 'test', (1090, 737, 49, 19)], [[33, 8], 'test', (894, 736, 194, 19)], [[33, 7], 'test', (791, 735, 101, 20)], [[33, 6], 'test', (687, 735, 102, 19)], [[33, 5], 'test', (583, 735, 102, 19)], [[33, 4], 'test', (547, 734, 34, 20)], [[33, 3], 'test', (428, 734, 117, 19)], [[33, 2], 'test', (247, 733, 179, 20)], [[33, 1], 'test', (184, 733, 61, 19)], [[33, 0], 'test', (9, 732, 173, 20)], [[32, 13], 'test', (1305, 717, 397, 20)], [[32, 12], 'test', (1254, 717, 49, 19)], [[32, 11], 'test', (1197, 717, 54, 18)], [[32, 10], 'test', (1141, 716, 54, 19)], [[32, 9], 'test', (1090, 716, 49, 19)], [[32, 8], 'test', (894, 715, 194, 20)], [[32, 7], 'test', (791, 715, 101, 19)], [[32, 6], 'test', (687, 715, 102, 18)], [[32, 5], 'test', (583, 714, 102, 19)], [[32, 4], 'test', (547, 714, 34, 19)], [[32, 3], 'test', (428, 714, 117, 19)], [[32, 2], 'test', (247, 713, 179, 19)], [[32, 1], 'test', (184, 713, 61, 18)], [[32, 0], 'test', (9, 712, 172, 19)], [[31, 13], 'test', (1305, 696, 397, 20)], [[31, 12], 'test', (1254, 696, 49, 19)], [[31, 11], 'test', (1197, 696, 54, 19)], [[31, 10], 'test', (1141, 695, 54, 20)], [[31, 9], 'test', (1090, 695, 49, 19)], [[31, 8], 'test', (894, 695, 194, 19)], [[31, 7], 'test', (791, 694, 101, 19)], [[31, 6], 'test', (687, 694, 102, 19)], [[31, 5], 'test', (583, 693, 102, 20)], [[31, 4], 'test', (547, 693, 34, 19)], [[31, 3], 'test', (428, 693, 117, 19)], [[31, 2], 'test', (247, 692, 179, 20)], [[31, 1], 'test', (183, 692, 62, 19)], [[31, 0], 'test', (8, 691, 173, 20)], [[30, 13], 'test', (1305, 676, 397, 20)], [[30, 12], 'test', (1253, 675, 50, 19)], [[30, 11], 'test', (1197, 675, 54, 19)], [[30, 10], 'test', (1141, 675, 54, 19)], [[30, 9], 'test', (1090, 675, 49, 19)], [[30, 8], 'test', (894, 674, 194, 19)], [[30, 7], 'test', (791, 673, 101, 19)], [[30, 6], 'test', (687, 673, 102, 19)], [[30, 5], 'test', (583, 673, 102, 19)], [[30, 4], 'test', (547, 672, 34, 19)], [[30, 3], 'test', (428, 672, 117, 19)], [[30, 2], 'test', (247, 671, 179, 20)], [[30, 1], 'test', (183, 671, 62, 19)], [[30, 0], 'test', (8, 670, 173, 20)], [[29, 13], 'test', (1305, 654, 397, 21)], [[29, 12], 'test', (1253, 654, 50, 20)], [[29, 11], 'test', (1197, 654, 54, 19)], [[29, 10], 'test', (1141, 654, 54, 19)], [[29, 9], 'test', (1090, 654, 49, 19)], [[29, 8], 'test', (894, 653, 194, 20)], [[29, 7], 'test', (791, 652, 101, 20)], [[29, 6], 'test', (687, 652, 102, 19)], [[29, 5], 'test', (583, 651, 102, 20)], [[29, 4], 'test', (547, 651, 34, 20)], [[29, 3], 'test', (428, 651, 117, 20)], [[29, 2], 'test', (247, 650, 179, 20)], [[29, 1], 'test', (183, 650, 62, 19)], [[29, 0], 'test', (8, 649, 173, 20)], [[28, 13], 'test', (1305, 634, 396, 20)], [[28, 12], 'test', (1253, 633, 50, 19)], [[28, 11], 'test', (1197, 633, 54, 19)], [[28, 10], 'test', (1141, 633, 54, 19)], [[28, 9], 'test', (1090, 633, 49, 19)], [[28, 8], 'test', (894, 632, 194, 20)], [[28, 7], 'test', (791, 631, 101, 19)], [[28, 6], 'test', (687, 631, 102, 19)], [[28, 5], 'test', (583, 630, 102, 20)], [[28, 4], 'test', (547, 630, 33, 19)], [[28, 3], 'test', (428, 630, 117, 19)], [[28, 2], 'test', (247, 629, 179, 20)], [[28, 1], 'test', (183, 629, 62, 19)], [[28, 0], 'test', (8, 628, 173, 20)], [[27, 13], 'test', (1305, 612, 396, 21)], [[27, 12], 'test', (1253, 612, 50, 19)], [[27, 11], 'test', (1197, 612, 54, 19)], [[27, 10], 'test', (1141, 612, 54, 19)], [[27, 9], 'test', (1090, 612, 49, 19)], [[27, 8], 'test', (894, 611, 194, 20)], [[27, 7], 'test', (791, 610, 101, 19)], [[27, 6], 'test', (687, 610, 102, 19)], [[27, 5], 'test', (583, 610, 102, 19)], [[27, 4], 'test', (547, 609, 33, 20)], [[27, 3], 'test', (428, 609, 117, 19)], [[27, 2], 'test', (247, 608, 179, 20)], [[27, 1], 'test', (183, 608, 62, 19)], [[27, 0], 'test', (8, 607, 173, 20)], [[26, 13], 'test', (1305, 591, 396, 21)], [[26, 12], 'test', (1253, 591, 50, 19)], [[26, 11], 'test', (1197, 591, 54, 19)], [[26, 10], 'test', (1141, 591, 54, 19)], [[26, 9], 'test', (1090, 590, 49, 20)], [[26, 8], 'test', (894, 589, 194, 20)], [[26, 7], 'test', (791, 589, 100, 20)], [[26, 6], 'test', (687, 589, 102, 19)], [[26, 5], 'test', (582, 588, 103, 20)], [[26, 4], 'test', (547, 588, 33, 20)], [[26, 3], 'test', (428, 588, 117, 20)], [[26, 2], 'test', (247, 587, 179, 20)], [[26, 1], 'test', (183, 587, 62, 19)], [[26, 0], 'test', (8, 586, 173, 20)], [[25, 13], 'test', (1304, 570, 397, 21)], [[25, 12], 'test', (1253, 570, 50, 19)], [[25, 11], 'test', (1197, 570, 54, 19)], [[25, 10], 'test', (1141, 569, 54, 20)], [[25, 9], 'test', (1090, 569, 49, 20)], [[25, 8], 'test', (894, 568, 194, 21)], [[25, 7], 'test', (791, 568, 100, 20)], [[25, 6], 'test', (687, 568, 102, 19)], [[25, 5], 'test', (582, 567, 103, 20)], [[25, 4], 'test', (547, 567, 33, 19)], [[25, 3], 'test', (428, 567, 117, 19)], [[25, 2], 'test', (247, 566, 179, 20)], [[25, 1], 'test', (183, 566, 62, 19)], [[25, 0], 'test', (8, 565, 173, 20)], [[24, 13], 'test', (1305, 550, 396, 20)], [[24, 12], 'test', (1253, 549, 50, 19)], [[24, 11], 'test', (1197, 549, 54, 19)], [[24, 10], 'test', (1141, 549, 54, 19)], [[24, 9], 'test', (1090, 549, 49, 18)], [[24, 8], 'test', (894, 548, 194, 19)], [[24, 7], 'test', (791, 548, 100, 18)], [[24, 6], 'test', (687, 547, 102, 19)], [[24, 5], 'test', (582, 547, 103, 19)], [[24, 4], 'test', (547, 546, 33, 19)], [[24, 3], 'test', (428, 546, 117, 19)], [[24, 2], 'test', (247, 545, 179, 20)], [[24, 1], 'test', (183, 545, 62, 19)], [[24, 0], 'test', (8, 544, 173, 20)], [[23, 13], 'test', (1305, 529, 396, 21)], [[23, 12], 'test', (1253, 529, 50, 19)], [[23, 11], 'test', (1197, 528, 54, 19)], [[23, 10], 'test', (1141, 528, 54, 19)], [[23, 9], 'test', (1090, 528, 49, 19)], [[23, 8], 'test', (894, 527, 194, 20)], [[23, 7], 'test', (791, 527, 100, 19)], [[23, 6], 'test', (687, 526, 102, 19)], [[23, 5], 'test', (582, 526, 103, 19)], [[23, 4], 'test', (547, 526, 33, 19)], [[23, 3], 'test', (428, 525, 117, 19)], [[23, 2], 'test', (247, 525, 179, 19)], [[23, 1], 'test', (183, 524, 62, 19)], [[23, 0], 'test', (8, 524, 173, 19)], [[22, 13], 'test', (1305, 509, 396, 20)], [[22, 12], 'test', (1253, 509, 50, 18)], [[22, 11], 'test', (1197, 508, 54, 19)], [[22, 10], 'test', (1141, 508, 54, 18)], [[22, 9], 'test', (1090, 508, 49, 18)], [[22, 8], 'test', (894, 507, 194, 19)], [[22, 7], 'test', (791, 507, 100, 18)], [[22, 6], 'test', (687, 506, 102, 19)], [[22, 5], 'test', (582, 506, 103, 18)], [[22, 4], 'test', (547, 506, 33, 18)], [[22, 3], 'test', (428, 505, 117, 19)], [[22, 2], 'test', (247, 504, 179, 19)], [[22, 1], 'test', (183, 504, 62, 19)], [[22, 0], 'test', (8, 503, 173, 19)], [[21, 13], 'test', (1305, 488, 396, 21)], [[21, 12], 'test', (1253, 488, 50, 19)], [[21, 11], 'test', (1197, 488, 54, 18)], [[21, 10], 'test', (1141, 487, 54, 19)], [[21, 9], 'test', (1090, 487, 49, 19)], [[21, 8], 'test', (894, 486, 194, 20)], [[21, 7], 'test', (791, 486, 100, 19)], [[21, 6], 'test', (687, 486, 102, 18)], [[21, 5], 'test', (583, 485, 102, 19)], [[21, 4], 'test', (547, 485, 33, 19)], [[21, 3], 'test', (428, 485, 117, 19)], [[21, 2], 'test', (247, 484, 179, 19)], [[21, 1], 'test', (183, 484, 62, 18)], [[21, 0], 'test', (8, 483, 173, 19)], [[20, 13], 'test', (1305, 468, 396, 20)], [[20, 12], 'test', (1253, 467, 50, 19)], [[20, 11], 'test', (1197, 467, 54, 19)], [[20, 10], 'test', (1141, 467, 54, 19)], [[20, 9], 'test', (1090, 466, 49, 19)], [[20, 8], 'test', (894, 465, 194, 20)], [[20, 7], 'test', (791, 465, 100, 19)], [[20, 6], 'test', (687, 465, 102, 19)], [[20, 5], 'test', (583, 464, 102, 20)], [[20, 4], 'test', (547, 464, 33, 19)], [[20, 3], 'test', (428, 464, 117, 19)], [[20, 2], 'test', (247, 463, 179, 20)], [[20, 1], 'test', (183, 463, 62, 19)], [[20, 0], 'test', (8, 462, 173, 20)], [[19, 13], 'test', (1305, 447, 396, 21)], [[19, 12], 'test', (1253, 447, 50, 18)], [[19, 11], 'test', (1197, 446, 54, 19)], [[19, 10], 'test', (1141, 446, 54, 19)], [[19, 9], 'test', (1090, 446, 49, 19)], [[19, 8], 'test', (894, 445, 194, 19)], [[19, 7], 'test', (791, 445, 101, 18)], [[19, 6], 'test', (687, 444, 102, 19)], [[19, 5], 'test', (583, 444, 102, 19)], [[19, 4], 'test', (547, 444, 33, 18)], [[19, 3], 'test', (428, 443, 117, 19)], [[19, 2], 'test', (247, 443, 179, 19)], [[19, 1], 'test', (183, 443, 62, 18)], [[19, 0], 'test', (8, 442, 173, 19)], [[18, 13], 'test', (1305, 426, 396, 21)], [[18, 12], 'test', (1253, 426, 50, 19)], [[18, 11], 'test', (1197, 426, 54, 19)], [[18, 10], 'test', (1141, 426, 54, 18)], [[18, 9], 'test', (1090, 425, 49, 19)], [[18, 8], 'test', (894, 424, 194, 20)], [[18, 7], 'test', (791, 424, 101, 19)], [[18, 6], 'test', (687, 424, 102, 19)], [[18, 5], 'test', (583, 423, 102, 19)], [[18, 4], 'test', (547, 423, 33, 19)], [[18, 3], 'test', (428, 423, 117, 19)], [[18, 2], 'test', (247, 422, 179, 19)], [[18, 1], 'test', (183, 422, 62, 19)], [[18, 0], 'test', (8, 421, 173, 20)], [[17, 13], 'test', (1305, 406, 396, 21)], [[17, 12], 'test', (1253, 406, 50, 18)], [[17, 11], 'test', (1197, 405, 54, 19)], [[17, 10], 'test', (1141, 405, 54, 19)], [[17, 9], 'test', (1090, 405, 49, 18)], [[17, 8], 'test', (894, 404, 194, 19)], [[17, 7], 'test', (791, 404, 101, 18)], [[17, 6], 'test', (687, 403, 102, 19)], [[17, 5], 'test', (582, 403, 103, 18)], [[17, 4], 'test', (547, 402, 33, 19)], [[17, 3], 'test', (428, 402, 117, 19)], [[17, 2], 'test', (247, 401, 179, 20)], [[17, 1], 'test', (183, 401, 62, 19)], [[17, 0], 'test', (8, 401, 173, 19)], [[16, 13], 'test', (1305, 385, 397, 21)], [[16, 12], 'test', (1253, 385, 50, 19)], [[16, 11], 'test', (1197, 384, 54, 19)], [[16, 10], 'test', (1141, 384, 54, 19)], [[16, 9], 'test', (1090, 384, 49, 19)], [[16, 8], 'test', (894, 383, 194, 20)], [[16, 7], 'test', (791, 382, 101, 20)], [[16, 6], 'test', (687, 382, 102, 19)], [[16, 5], 'test', (583, 382, 102, 19)], [[16, 4], 'test', (547, 382, 33, 19)], [[16, 3], 'test', (428, 381, 117, 19)], [[16, 2], 'test', (247, 381, 179, 19)], [[16, 1], 'test', (183, 381, 62, 18)], [[16, 0], 'test', (8, 380, 173, 19)], [[15, 13], 'test', (1305, 364, 397, 21)], [[15, 12], 'test', (1254, 364, 49, 19)], [[15, 11], 'test', (1197, 363, 54, 20)], [[15, 10], 'test', (1141, 363, 54, 19)], [[15, 9], 'test', (1090, 363, 49, 19)], [[15, 8], 'test', (894, 362, 194, 20)], [[15, 7], 'test', (791, 362, 101, 19)], [[15, 6], 'test', (687, 362, 102, 18)], [[15, 5], 'test', (583, 361, 102, 19)], [[15, 4], 'test', (547, 361, 33, 19)], [[15, 3], 'test', (428, 361, 117, 19)], [[15, 2], 'test', (247, 360, 179, 19)], [[15, 1], 'test', (183, 360, 62, 19)], [[15, 0], 'test', (8, 359, 173, 20)], [[14, 13], 'test', (1305, 343, 397, 21)], [[14, 12], 'test', (1254, 343, 49, 19)], [[14, 11], 'test', (1197, 343, 54, 19)], [[14, 10], 'test', (1141, 342, 54, 19)], [[14, 9], 'test', (1090, 342, 49, 19)], [[14, 8], 'test', (894, 341, 194, 20)], [[14, 7], 'test', (791, 341, 101, 19)], [[14, 6], 'test', (687, 340, 102, 20)], [[14, 5], 'test', (583, 340, 102, 20)], [[14, 4], 'test', (547, 340, 33, 19)], [[14, 3], 'test', (428, 340, 117, 19)], [[14, 2], 'test', (247, 339, 179, 20)], [[14, 1], 'test', (183, 339, 62, 19)], [[14, 0], 'test', (8, 338, 173, 20)], [[13, 13], 'test', (1305, 323, 397, 21)], [[13, 12], 'test', (1254, 322, 49, 19)], [[13, 11], 'test', (1197, 322, 54, 19)], [[13, 10], 'test', (1141, 322, 54, 18)], [[13, 9], 'test', (1090, 321, 49, 19)], [[13, 8], 'test', (894, 321, 194, 19)], [[13, 7], 'test', (791, 320, 101, 19)], [[13, 6], 'test', (687, 320, 102, 19)], [[13, 5], 'test', (583, 320, 102, 18)], [[13, 4], 'test', (547, 319, 33, 19)], [[13, 3], 'test', (428, 319, 117, 19)], [[13, 2], 'test', (247, 318, 179, 20)], [[13, 1], 'test', (183, 318, 62, 19)], [[13, 0], 'test', (8, 318, 173, 19)], [[12, 13], 'test', (1305, 302, 397, 21)], [[12, 12], 'test', (1254, 301, 49, 20)], [[12, 11], 'test', (1197, 301, 54, 19)], [[12, 10], 'test', (1141, 301, 54, 19)], [[12, 9], 'test', (1090, 300, 49, 20)], [[12, 8], 'test', (894, 300, 194, 19)], [[12, 7], 'test', (791, 299, 101, 20)], [[12, 6], 'test', (687, 299, 102, 19)], [[12, 5], 'test', (583, 298, 102, 20)], [[12, 4], 'test', (547, 298, 33, 20)], [[12, 3], 'test', (428, 298, 117, 19)], [[12, 2], 'test', (247, 297, 179, 20)], [[12, 1], 'test', (183, 297, 62, 19)], [[12, 0], 'test', (8, 296, 173, 20)], [[11, 13], 'test', (1305, 281, 397, 21)], [[11, 12], 'test', (1254, 281, 49, 19)], [[11, 11], 'test', (1197, 280, 54, 19)], [[11, 10], 'test', (1141, 280, 54, 19)], [[11, 9], 'test', (1090, 280, 49, 19)], [[11, 8], 'test', (894, 279, 194, 19)], [[11, 7], 'test', (791, 278, 101, 19)], [[11, 6], 'test', (687, 278, 102, 19)], [[11, 5], 'test', (583, 278, 102, 19)], [[11, 4], 'test', (547, 277, 33, 19)], [[11, 3], 'test', (428, 277, 117, 19)], [[11, 2], 'test', (247, 276, 179, 20)], [[11, 1], 'test', (183, 276, 62, 19)], [[11, 0], 'test', (8, 276, 173, 19)], [[10, 13], 'test', (1305, 261, 397, 20)], [[10, 12], 'test', (1254, 260, 49, 19)], [[10, 11], 'test', (1197, 260, 54, 19)], [[10, 10], 'test', (1141, 259, 54, 19)], [[10, 9], 'test', (1090, 259, 49, 19)], [[10, 8], 'test', (894, 258, 194, 19)], [[10, 7], 'test', (791, 258, 101, 19)], [[10, 6], 'test', (687, 257, 102, 19)], [[10, 5], 'test', (583, 257, 102, 19)], [[10, 4], 'test', (547, 257, 33, 19)], [[10, 3], 'test', (428, 256, 117, 19)], [[10, 2], 'test', (247, 256, 179, 19)], [[10, 1], 'test', (183, 255, 62, 19)], [[10, 0], 'test', (8, 255, 173, 19)], [[9, 13], 'test', (1305, 240, 397, 21)], [[9, 12], 'test', (1254, 239, 49, 19)], [[9, 11], 'test', (1197, 239, 55, 19)], [[9, 10], 'test', (1141, 239, 54, 19)], [[9, 9], 'test', (1090, 238, 49, 19)], [[9, 8], 'test', (894, 237, 194, 20)], [[9, 7], 'test', (791, 237, 101, 19)], [[9, 6], 'test', (687, 237, 102, 19)], [[9, 5], 'test', (583, 236, 102, 19)], [[9, 4], 'test', (547, 236, 33, 19)], [[9, 3], 'test', (428, 236, 117, 19)], [[9, 2], 'test', (247, 235, 179, 19)], [[9, 1], 'test', (183, 235, 62, 19)], [[9, 0], 'test', (8, 234, 173, 20)], [[8, 13], 'test', (1305, 219, 397, 21)], [[8, 12], 'test', (1254, 219, 49, 19)], [[8, 11], 'test', (1197, 219, 55, 18)], [[8, 10], 'test', (1141, 219, 54, 18)], [[8, 9], 'test', (1090, 218, 49, 19)], [[8, 8], 'test', (894, 217, 194, 19)], [[8, 7], 'test', (791, 217, 101, 18)], [[8, 6], 'test', (687, 216, 102, 19)], [[8, 5], 'test', (583, 216, 102, 19)], [[8, 4], 'test', (547, 216, 33, 18)], [[8, 3], 'test', (428, 215, 117, 19)], [[8, 2], 'test', (247, 215, 179, 19)], [[8, 1], 'test', (183, 215, 62, 18)], [[8, 0], 'test', (8, 214, 173, 19)], [[7, 13], 'test', (1305, 199, 397, 21)], [[7, 12], 'test', (1254, 199, 49, 18)], [[7, 11], 'test', (1197, 198, 55, 19)], [[7, 10], 'test', (1141, 198, 54, 19)], [[7, 9], 'test', (1090, 198, 49, 18)], [[7, 8], 'test', (894, 197, 194, 19)], [[7, 7], 'test', (791, 196, 101, 19)], [[7, 6], 'test', (687, 196, 102, 19)], [[7, 5], 'test', (582, 195, 103, 19)], [[7, 4], 'test', (547, 195, 33, 19)], [[7, 3], 'test', (428, 195, 117, 19)], [[7, 2], 'test', (247, 194, 179, 20)], [[7, 1], 'test', (183, 194, 61, 19)], [[7, 0], 'test', (8, 193, 173, 20)], [[6, 13], 'test', (1305, 179, 397, 21)], [[6, 12], 'test', (1254, 178, 49, 19)], [[6, 11], 'test', (1197, 178, 55, 19)], [[6, 10], 'test', (1141, 177, 54, 19)], [[6, 9], 'test', (1090, 177, 50, 19)], [[6, 8], 'test', (894, 176, 194, 20)], [[6, 7], 'test', (791, 176, 101, 19)], [[6, 6], 'test', (687, 175, 102, 19)], [[6, 5], 'test', (582, 175, 103, 19)], [[6, 4], 'test', (547, 174, 33, 19)], [[6, 3], 'test', (428, 174, 117, 19)], [[6, 2], 'test', (247, 173, 179, 20)], [[6, 1], 'test', (183, 173, 61, 19)], [[6, 0], 'test', (8, 173, 173, 19)], [[5, 13], 'test', (1305, 158, 397, 22)], [[5, 12], 'test', (1254, 157, 49, 19)], [[5, 11], 'test', (1197, 157, 55, 19)], [[5, 10], 'test', (1141, 156, 54, 20)], [[5, 9], 'test', (1090, 156, 49, 19)], [[5, 8], 'test', (894, 155, 194, 20)], [[5, 7], 'test', (791, 155, 101, 19)], [[5, 6], 'test', (687, 154, 102, 19)], [[5, 5], 'test', (582, 154, 103, 19)], [[5, 4], 'test', (547, 153, 33, 20)], [[5, 3], 'test', (428, 153, 117, 19)], [[5, 2], 'test', (247, 152, 179, 20)], [[5, 1], 'test', (183, 152, 61, 19)], [[5, 0], 'test', (8, 151, 173, 20)], [[4, 13], 'test', (1305, 137, 397, 22)], [[4, 12], 'test', (1254, 137, 49, 19)], [[4, 11], 'test', (1197, 136, 55, 19)], [[4, 10], 'test', (1141, 136, 54, 19)], [[4, 9], 'test', (1090, 135, 49, 19)], [[4, 8], 'test', (894, 134, 194, 20)], [[4, 7], 'test', (791, 134, 101, 19)], [[4, 6], 'test', (687, 133, 102, 19)], [[4, 5], 'test', (582, 133, 103, 19)], [[4, 4], 'test', (547, 133, 33, 19)], [[4, 3], 'test', (427, 132, 118, 20)], [[4, 2], 'test', (246, 132, 180, 19)], [[4, 1], 'test', (183, 131, 61, 19)], [[4, 0], 'test', (8, 131, 173, 19)], [[3, 13], 'test', (1305, 116, 397, 22)], [[3, 12], 'test', (1254, 116, 49, 19)], [[3, 11], 'test', (1197, 116, 55, 19)], [[3, 10], 'test', (1141, 115, 54, 19)], [[3, 9], 'test', (1090, 115, 49, 19)], [[3, 8], 'test', (894, 113, 194, 20)], [[3, 7], 'test', (791, 113, 101, 19)], [[3, 6], 'test', (687, 113, 102, 19)], [[3, 5], 'test', (582, 112, 103, 19)], [[3, 4], 'test', (547, 112, 33, 19)], [[3, 3], 'test', (427, 112, 118, 19)], [[3, 2], 'test', (246, 111, 180, 19)], [[3, 1], 'test', (183, 111, 61, 19)], [[2, 13], 'test', (1305, 96, 397, 21)], [[2, 12], 'test', (1254, 95, 49, 19)], [[2, 11], 'test', (1197, 95, 55, 19)], [[2, 10], 'test', (1141, 95, 54, 18)], [[2, 9], 'test', (1090, 94, 49, 19)], [[2, 8], 'test', (894, 93, 194, 19)], [[2, 7], 'test', (790, 93, 102, 18)], [[2, 6], 'test', (686, 92, 103, 19)], [[2, 5], 'test', (582, 92, 103, 19)], [[2, 4], 'test', (546, 92, 34, 18)], [[2, 3], 'test', (427, 91, 118, 19)], [[2, 2], 'test', (246, 91, 180, 19)], [[2, 1], 'test', (182, 90, 62, 19)], [[2, 0], 'test', (8, 90, 173, 40)], [[1, 13], 'test', (1305, 75, 397, 22)], [[1, 12], 'test', (1254, 75, 49, 19)], [[1, 11], 'test', (1197, 74, 55, 19)], [[1, 10], 'test', (1141, 74, 54, 19)], [[1, 9], 'test', (1090, 74, 49, 18)], [[1, 8], 'test', (894, 72, 194, 20)], [[1, 7], 'test', (790, 72, 102, 19)], [[1, 6], 'test', (686, 71, 103, 20)], [[1, 5], 'test', (582, 71, 103, 19)], [[1, 4], 'test', (546, 71, 34, 19)], [[1, 3], 'test', (427, 71, 118, 19)], [[1, 2], 'test', (246, 70, 180, 19)], [[1, 1], 'test', (182, 70, 62, 19)], [[0, 13], 'test', (1482, 0, 271, 3)]]\n",
    "\n",
    "tt=   json.dumps(t)\n",
    "with open(\"tttttt.json\", 'w') as f:\n",
    "    f.write(json.dumps(tt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cv2.getBuildInformation())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "error",
     "evalue": "OpenCV(3.4.2) C:\\projects\\opencv-python\\opencv\\modules\\photo\\src\\denoising.cpp:119: error: (-215:Assertion failed) !_src.empty() in function 'cv::fastNlMeansDenoising'\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31merror\u001b[0m                                     Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-5b4a31f4384c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;31m#img = cv2.cvtColor(img, code=cv2.COLOR_BGR2RGB)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mdst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfastNlMeansDenoising\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m7\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m21\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgcf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_size_inches\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m90\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m50\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'gray'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31merror\u001b[0m: OpenCV(3.4.2) C:\\projects\\opencv-python\\opencv\\modules\\photo\\src\\denoising.cpp:119: error: (-215:Assertion failed) !_src.empty() in function 'cv::fastNlMeansDenoising'\n"
     ]
    }
   ],
   "source": [
    "filename = \"4.jpg\"\n",
    "img = cv2.imread(filename)\n",
    "#img = cv2.cvtColor(img, code=cv2.COLOR_BGR2RGB)\n",
    " \n",
    "gray1=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "dst = cv2.fastNlMeansDenoising(img, None, 10, 7, 21)\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(2,1,1),plt.imshow(img,'gray')\n",
    "plt.subplot(2,1,2),plt.imshow(dst,'gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"4.jpg\"\n",
    "img0 = cv2.imread(filename)\n",
    "img = cv2.cvtColor(img0, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "# Create default parametrization LSD\n",
    "lsd = cv2.createLineSegmentDetector(0)\n",
    "\n",
    "# Detect lines in the image\n",
    "dlines = lsd.detect(img)  # TODO 返回什么？\n",
    "# Position 0 of the returned tuple are the detected lines\n",
    "lines = lsd.detect(img)[0]\n",
    "\n",
    "# Draw detected lines in the image\n",
    "# drawn_img = lsd.drawSegments(img, lines)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "for dline in dlines[0]:\n",
    "    x0 = int(round(dline[0][0]))\n",
    "    y0 = int(round(dline[0][1]))\n",
    "    x1 = int(round(dline[0][2]))\n",
    "    y1 = int(round(dline[0][3]))\n",
    "    cv2.line(img0, (x0, y0), (x1, y1), (0, 255, 0), 1, cv2.LINE_AA)\n",
    "\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(1,1,1),plt.imshow(img0,'gray')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"4.jpg\"\n",
    "img0 = cv2.imread(filename)\n",
    "img = cv2.cvtColor(img0, cv2.COLOR_BGR2GRAY)\n",
    "emptyImage = np.zeros(img0.shape, np.uint8)\n",
    "length_threshold    = 330  \n",
    "distance_threshold  = 1.41421356 \n",
    "canny_th1           = 50.0 \n",
    "canny_th2           = 200.0  \n",
    "canny_aperture_size = 3 \n",
    "do_merge            = False\n",
    "fld = cv2.ximgproc.createFastLineDetector(  \n",
    "        length_threshold,  \n",
    "        distance_threshold,   \n",
    "        canny_th1,   \n",
    "        canny_th2,   \n",
    "        canny_aperture_size,  \n",
    "        do_merge)\n",
    "\n",
    "dlines = fld.detect(img)  # TODO 返回什么？\n",
    "# Position 0 of the returned tuple are the detected lines\n",
    "#lines = lsd.detect(img)[0]\n",
    "\n",
    "# Draw detected lines in the image\n",
    "# drawn_img = lsd.drawSegments(img, lines)\n",
    "print(dlines[0][0])\n",
    "\n",
    "fld.drawSegments(emptyImage,dlines)\n",
    "emptyImage = cv2.cvtColor(emptyImage, cv2.COLOR_BGR2GRAY)\n",
    "dst = cv2.inpaint(img0, emptyImage, 3, cv2.INPAINT_TELEA)\n",
    "\n",
    "\n",
    "dst2 = cv2.inpaint(img0, emptyImage, 3, cv2.INPAINT_NS)\n",
    "\"\"\"\n",
    "for dline in dlines[0]:\n",
    "    x0 = int(round(dline[0][0]))\n",
    "    y0 = int(round(dline[0][1]))\n",
    "    x1 = int(round(dline[0][2]))\n",
    "    y1 = int(round(dline[0][3]))\n",
    "    cv2.line(img0, (x0, y0), (x1, y1), (0, 255, 0), 1, cv2.LINE_AA)\n",
    "\"\"\"\n",
    "plt.gcf().set_size_inches(90,50)\n",
    "plt.subplot(2,1,1),plt.imshow(emptyImage,\"gray\")\n",
    "plt.subplot(2,1,2),plt.imshow(dst2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('1：读取文件')\n",
    "filepath=os.path.join(path,filename)\n",
    "iproc_obj = imgproc.ImageProc(filepath)\n",
    "print(iproc_obj.input_img.shape)\n",
    "print('2：检测水平线和角度')\n",
    "sum = 0.0\n",
    "number = 0\n",
    "lines_hough = iproc_obj.detect_lines(canny_low_thresh=50, canny_high_thresh=250, canny_kernel_size=3,\n",
    "                                     hough_rho_res=1,\n",
    "                                     hough_theta_res=np.pi/800,\n",
    "                                     hough_votes_thresh=850)\n",
    "\n",
    "\n",
    "img_lines = iproc_obj.draw_lines(orig_img_as_background=True)\n",
    "theta_rotate = iproc_obj.find_rotation_or_skew()\n",
    "print(\"-----校正角度 {}\".format(theta_rotate))\n",
    "if debug:\n",
    "    plt.gcf().set_size_inches(30,50)\n",
    "    plt.imshow(img_lines)\n",
    "    plt.show()\n",
    "print('3：水平校正')\n",
    "rotate_image = iproc_obj.rotate_image(iproc_obj.input_img,theta_rotate)\n",
    "print(rotate_image.shape)\n",
    "if debug:\n",
    "    plt.gcf().set_size_inches(30,50)\n",
    "    plt.imshow(rotate_image,'gray')\n",
    "    plt.show()\n",
    "print('4：检测表格')\n",
    "dtable = detectTable(rotate_image)\n",
    "# mask 表格二值化图片，joints_img 交叉点图片\n",
    "mask,joints_img =  dtable.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
